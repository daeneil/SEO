// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
        
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

model URL {
  Id        Int      @id @default(autoincrement())
  url       String   @unique
  CreatedAt DateTime @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String?   @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  passwordResetToken    String?   @unique
  passwordResetTokenExp DateTime?
  accounts              Account[]
  sessions              Session[]
  invites   Invite[] @relation("UserInvites")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Invite {
  id          String   @id @default(uuid())
  email       String
  token       String   @unique
  used        Boolean  @default(false)
  inviterId   String
  inviter     User     @relation(fields: [inviterId], references: [id], name: "UserInvites")
  createdAt   DateTime @default(now())
}

model Keyword {
  id        String   @id @default(uuid())
  name      String
  searchVolume Int
  ranking   Int
  ctr       Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Backlink {
  id        String   @id @default(uuid())
  url       String
  domain    String
  authority Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PageAudit {
  id        String   @id @default(uuid())
  url       String
  status    String
  issues    Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
